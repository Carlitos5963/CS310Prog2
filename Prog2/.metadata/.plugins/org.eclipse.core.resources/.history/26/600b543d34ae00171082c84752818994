/*  Jose Carlos Gomez
    cssc0898
*/

package data_structures;

import java.util.Iterator;
import java.util.NoSuchElementException;

public class LinearList<E extends Comparable<E>> implements LinearListADT<E> {
	private int currentSize, maxSize, front, rear;
	private E[] storage;
	
	public LinearList(int size) {
		maxSize = size;
		front = rear = currentSize = 0;
		storage = (E[])new Object[maxSize];
	}
	
	public LinearList() {
		this(DEFAULT_MAX_CAPACITY);
	}

	//Adds the Object obj to the beginning of list and returns true if the list is not full.
	//returns false and aborts the insertion if the list is full.
	public boolean addFirst(E obj) {
		if(isFull()) {
			return false;
		}
		else {
			if(currentSize == 0) {
				storage[front] = obj;
				currentSize++;
				return true;
			} 
			front--;
			if(front < 0) {
				front = maxSize-1;
				storage[front] = obj;
				currentSize++;
				return true;
			} 
			storage[front] = obj;
			currentSize++;
			return true;
		} 
	} 

	//Adds the Object obj to the end of list and returns true if the list is not full.
	//returns false and aborts the insertion if the list is full..  
	public boolean addLast(E obj) { 
		if(isFull()) {
			return false;
		}
		else {
			if(currentSize == 0) {
				storage[rear] = obj;
				currentSize++;
				return true;
			} 
			rear++;
			if(rear >= maxSize) {
				rear = 0;
				storage[rear] = obj;
				currentSize++;
				return true;
			} 
			storage[rear] = obj;
			currentSize++;
			return true;
		} 
	} 

	//Removes and returns the parameter object obj in first position in list if the list is not empty,  
	//null if the list is empty. 
	public E removeFirst() {
		if(isEmpty()) {
			return null;
		}
		if(currentSize == 1) {
			currentSize--;
			return storage[front];
		}
		else {
			currentSize--;
			front++;
			if(front >= maxSize) {
				front = 0;
				return storage[front];
			}
			return storage[front-1];
		}
	}

	//Removes and returns the parameter object obj in last position in list if the list is not empty, 
	//null if the list is empty. 
	public E removeLast() {
		if(isEmpty()) {
			return null;
		}
		if(currentSize == 1) {
			currentSize--;
			return storage[rear]; 
		}
		else {
			currentSize--;
			rear--;
			if(rear < 0) {
				rear = maxSize-1;
				return storage[rear];
			}
			return storage[rear+1];
		}
	}

	//Removes and returns the parameter object obj from the list if the list contains it, null otherwise.
	//The ordering of the list is preserved.  The list may contain duplicate elements.  This method
	//removes and returns the first matching element found when traversing the list from first position.
	//Note that you may have to shift elements to fill in the slot where the deleted element was located.
	public E remove(E obj) {
		Iterator<E> iterator = iterator();
		E tmp;
		int index = front;
		while(iterator.hasNext()) {
			tmp = iterator.next();
			if(obj.compareTo(tmp) == 0) {
				while(iterator.hasNext()) {
					storage[index] = iterator.next();
					index++;
					if(index >= maxSize)
						index = 0;
				}
				currentSize--;
				rear--;
				if(rear < 0)
					rear = maxSize-1;
				return tmp;
			}
			index++;
			if(index >= maxSize)
				index = 0;
		}
		return null;
	}    

	//Returns the first element in the list, null if the list is empty.
	//The list is not modified.
	public E peekFirst() {
		if(isEmpty())
			return null;
		return storage[front];
	}

	//Returns the last element in the list, null if the list is empty.
	//The list is not modified.
	public E peekLast() {
		if(isEmpty()) 
			return null;
		return storage[rear];
	}                 

	//Returns true if the parameter object obj is in the list, false otherwise.
	//The list is not modified.
	public boolean contains(E obj) { 
		return find(obj) != null;
	}

	//Returns the element matching obj if it is in the list, null otherwise.
	//In the case of duplicates, this method returns the element closest to front.
	//The list is not modified.
	public E find(E obj) {
		Iterator<E> iterator = iterator();
		while(iterator.hasNext()) {
			if((obj).compareTo(iterator.next()) == 0) {
			return obj;
			}
		}
		return null; 
	}    

	//The list is returned to an empty state.
	public void clear() {
		front = rear = currentSize = 0;
	}

	//Returns true if the list is empty, otherwise false
	public boolean isEmpty() { 
		return currentSize == 0;
	}

	//Returns true if the list is full, otherwise false
	public boolean isFull() { 
		return currentSize >= maxSize;
	}

	//Returns the number of Objects currently in the list.
	public int size() {
		return currentSize;
	}

	//Returns an Iterator of the values in the list, presented in
	//the same order as the underlying order of the list. (front first, rear last)
	public Iterator<E> iterator() {
		return new IteratorHelper();
		}
		class IteratorHelper implements Iterator<E>{
			private int count, index;
			
			public IteratorHelper() {
				index = front;
				count = 0;
			}
			
			public boolean hasNext() {
				return count != currentSize;
			}
			
			public E next() {
				if(!hasNext())throw new NoSuchElementException();
				E temp = storage[index++];
				if(index == maxSize)
					index = 0;
				count++;
				return temp;
			}
			
			public void remove() {
				throw new UnsupportedOperationException();
			}
		}
	}

